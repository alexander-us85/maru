(require "text-parser.l")
(define-class <tpeg> <text-parser> ())
(define-selector $equals)
(define-selector $blank)
(define-selector $eol)
(define-selector $comment)
(define-selector $space)
(define-selector $bar)
(define-selector $pling)
(define-selector $ampersand)
(define-selector $colon)
(define-selector $arrow)
(define-selector $quotesgl)
(define-selector $backquote)
(define-selector $commaat)
(define-selector $comma)
(define-selector $dollarhash)
(define-selector $dollardbl)
(define-selector $dollar)
(define-selector $at)
(define-selector $query)
(define-selector $minus)
(define-selector $plus)
(define-selector $star)
(define-selector $lparen)
(define-selector $rparen)
(define-selector $lbrace)
(define-selector $rbrace)
(define-selector $dot)
(define-selector $tilde)
(define-selector $digit)
(define-selector $higit)
(define-selector $number)
(define-selector $letter)
(define-selector $idpart)
(define-selector $identifier)
(define-selector $char)
(define-selector $string)
(define-selector $class)
(define-selector $grammar)
(define-selector $symfirst)
(define-selector $symrest)
(define-selector $symbol)
(define-selector $sexpr)
(define-selector $scomment)
(define-selector $sspace)
(define-selector $sexpression)
(define-selector $llist)
(define-selector $atom)
(define-selector $repetition)
(define-selector $conversion)
(define-selector $predicate)
(define-selector $require)
(define-selector $sequence)
(define-selector $expression)
(define-selector $parameters)
(define-selector $definition)
(define-selector $definitions)
(define-selector $varname)
(define-selector $parser_decl)
(define-selector $parser_spec)
(define-selector $$equals)
(define-selector $$blank)
(define-selector $$eol)
(define-selector $$comment)
(define-selector $$space)
(define-selector $$bar)
(define-selector $$pling)
(define-selector $$ampersand)
(define-selector $$colon)
(define-selector $$arrow)
(define-selector $$quotesgl)
(define-selector $$backquote)
(define-selector $$commaat)
(define-selector $$comma)
(define-selector $$dollarhash)
(define-selector $$dollardbl)
(define-selector $$dollar)
(define-selector $$at)
(define-selector $$query)
(define-selector $$minus)
(define-selector $$plus)
(define-selector $$star)
(define-selector $$lparen)
(define-selector $$rparen)
(define-selector $$lbrace)
(define-selector $$rbrace)
(define-selector $$dot)
(define-selector $$tilde)
(define-selector $$digit)
(define-selector $$higit)
(define-selector $$number)
(define-selector $$letter)
(define-selector $$idpart)
(define-selector $$identifier)
(define-selector $$char)
(define-selector $$string)
(define-selector $$class)
(define-selector $$grammar)
(define-selector $$symfirst)
(define-selector $$symrest)
(define-selector $$symbol)
(define-selector $$sexpr)
(define-selector $$scomment)
(define-selector $$sspace)
(define-selector $$sexpression)
(define-selector $$llist)
(define-selector $$atom)
(define-selector $$repetition)
(define-selector $$conversion)
(define-selector $$predicate)
(define-selector $$require)
(define-selector $$sequence)
(define-selector $$expression)
(define-selector $$parameters)
(define-selector $$definition)
(define-selector $$definitions)
(define-selector $$varname)
(define-selector $$parser_decl)
(define-selector $$parser_spec)
(define-method $equals <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 61) (text-parser-invoke-rule (quote space) $space self)) (set self.position pos) ()))))
(define-method $blank <tpeg> () (let () (text-parser-match-class self "\011 ")))
(define-method $eol <tpeg> () (let () (or (let ((pos self.position)) (unless (and (text-parser-match-object self 10) (let ((_list_ (array))) (while (text-parser-match-char self 13) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-match-object self 13) (let ((_list_ (array))) (while (text-parser-match-char self 10) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1)) (set self.position pos) ())))))
(define-method $comment <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 35) (let ((_list_ (array))) (while (let ((pos self.position)) (unless (and (not (let ((pos self.position)) (and (text-parser-invoke-rule (quote eol) $$eol self) (set self.position pos)))) (text-parser-match-any self)) (set self.position pos) ())) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1)) (set self.position pos) ()))))
(define-method $space <tpeg> () (let () (let ((_list_ (array))) (while (or (text-parser-invoke-rule (quote blank) $blank self) (text-parser-invoke-rule (quote eol) $eol self) (text-parser-invoke-rule (quote comment) $comment self)) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1)))
(define-method $bar <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 124) (text-parser-invoke-rule (quote space) $space self)) (set self.position pos) ()))))
(define-method $pling <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 33) (text-parser-invoke-rule (quote space) $space self)) (set self.position pos) ()))))
(define-method $ampersand <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 38) (text-parser-invoke-rule (quote space) $space self)) (set self.position pos) ()))))
(define-method $colon <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 58) (text-parser-invoke-rule (quote space) $space self)) (set self.position pos) ()))))
(define-method $arrow <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-string self "->" 2) (text-parser-invoke-rule (quote space) $space self)) (set self.position pos) ()))))
(define-method $quotesgl <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 39) (text-parser-invoke-rule (quote space) $space self)) (set self.position pos) ()))))
(define-method $backquote <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 96) (text-parser-invoke-rule (quote space) $space self)) (set self.position pos) ()))))
(define-method $commaat <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-string self ",@" 2) (text-parser-invoke-rule (quote space) $space self)) (set self.position pos) ()))))
(define-method $comma <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 44) (text-parser-invoke-rule (quote space) $space self)) (set self.position pos) ()))))
(define-method $dollarhash <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-string self "$#" 2) (text-parser-invoke-rule (quote space) $space self)) (set self.position pos) ()))))
(define-method $dollardbl <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-string self "$$" 2) (text-parser-invoke-rule (quote space) $space self)) (set self.position pos) ()))))
(define-method $dollar <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 36) (text-parser-invoke-rule (quote space) $space self)) (set self.position pos) ()))))
(define-method $at <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 64) (text-parser-invoke-rule (quote space) $space self)) (set self.position pos) ()))))
(define-method $query <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 63) (text-parser-invoke-rule (quote space) $space self)) (set self.position pos) ()))))
(define-method $minus <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 45) (text-parser-invoke-rule (quote space) $space self)) (set self.position pos) ()))))
(define-method $plus <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 43) (text-parser-invoke-rule (quote space) $space self)) (set self.position pos) ()))))
(define-method $star <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 42) (text-parser-invoke-rule (quote space) $space self)) (set self.position pos) ()))))
(define-method $lparen <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 40) (text-parser-invoke-rule (quote space) $space self)) (set self.position pos) ()))))
(define-method $rparen <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 41) (text-parser-invoke-rule (quote space) $space self)) (set self.position pos) ()))))
(define-method $lbrace <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 123) (text-parser-invoke-rule (quote space) $space self)) (set self.position pos) ()))))
(define-method $rbrace <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 125) (text-parser-invoke-rule (quote space) $space self)) (set self.position pos) ()))))
(define-method $dot <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 46) (text-parser-invoke-rule (quote space) $space self)) (set self.position pos) ()))))
(define-method $tilde <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 126) (text-parser-invoke-rule (quote space) $space self)) (set self.position pos) ()))))
(define-method $digit <tpeg> () (let () (text-parser-match-class self "0123456789")))
(define-method $higit <tpeg> () (let () (text-parser-match-class self "0123456789ABCDEFabcdef")))
(define-method $number <tpeg> () (let (n) (let ((pos self.position)) (unless (and (when (and (let ((pos self.position)) (when (let ((pos self.position)) (unless (and (let () (text-parser-match-object self 45) 1) (let ((_ok_ ())) (while (text-parser-invoke-rule (quote digit) $$digit self) (set _ok_ 1)) _ok_)) (set self.position pos) ())) (set self.result (text-parser-list-from-to self pos self.position)) 1)) (set self.result (string->number-base (list->string self.result) 10))) (set n self.result) 1) (text-parser-invoke-rule (quote space) $$space self) (let () (set self.result n) 1)) (set self.position pos) ()))))
(define-method $letter <tpeg> () (let () (text-parser-match-class self "ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz")))
(define-method $idpart <tpeg> () (let () (let ((pos self.position)) (when (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote letter) $$letter self) (let () (while (or (text-parser-invoke-rule (quote letter) $$letter self) (text-parser-invoke-rule (quote digit) $$digit self))) 1)) (set self.position pos) ())) (set self.result (string->symbol (text-parser-string-from-to self pos self.position)))))))
(define-method $identifier <tpeg> () (let (id) (let ((pos self.position)) (unless (and (when (text-parser-invoke-rule (quote idpart) $idpart self) (set id self.result) 1) (text-parser-invoke-rule (quote space) $$space self) (let () (set self.result id) 1)) (set self.position pos) ()))))
(define-method $char <tpeg> () (let () (or (let ((pos self.position)) (unless (and (text-parser-match-object self 92) (or (let ((pos self.position)) (unless (and (text-parser-match-object self 116) (let () (set self.result 9) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-match-object self 110) (let () (set self.result 10) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-match-object self 114) (let () (set self.result 13) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-match-object self 120) (and (let ((pos self.position)) (when (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote higit) $$higit self) (text-parser-invoke-rule (quote higit) $$higit self)) (set self.position pos) ())) (set self.result (text-parser-list-from-to self pos self.position)) 1)) (set self.result (string->number-base (list->string self.result) 16)))) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-match-object self 117) (and (let ((pos self.position)) (when (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote higit) $$higit self) (text-parser-invoke-rule (quote higit) $$higit self) (text-parser-invoke-rule (quote higit) $$higit self) (text-parser-invoke-rule (quote higit) $$higit self)) (set self.position pos) ())) (set self.result (text-parser-list-from-to self pos self.position)) 1)) (set self.result (string->number-base (list->string self.result) 16)))) (set self.position pos) ())) (text-parser-match-any self))) (set self.position pos) ())) (text-parser-match-any self))))
(define-method $string <tpeg> () (let (s) (let ((pos self.position)) (unless (and (text-parser-match-object self 34) (when (and (let ((_list_ (array))) (while (let ((pos self.position)) (unless (and (not (let ((pos self.position)) (and (text-parser-match-object self 34) (set self.position pos)))) (text-parser-invoke-rule (quote char) $char self)) (set self.position pos) ())) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1) (set self.result (list->string self.result))) (set s self.result) 1) (text-parser-match-object self 34) (text-parser-invoke-rule (quote space) $$space self) (let () (set self.result s) 1)) (set self.position pos) ()))))
(define-method $class <tpeg> () (let (s) (let ((pos self.position)) (unless (and (text-parser-match-object self 91) (when (and (let ((_list_ (array))) (while (let ((pos self.position)) (unless (and (not (let ((pos self.position)) (and (text-parser-match-object self 93) (set self.position pos)))) (text-parser-invoke-rule (quote char) $char self)) (set self.position pos) ())) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1) (set self.result (list->string self.result))) (set s self.result) 1) (text-parser-match-object self 93) (text-parser-invoke-rule (quote space) $$space self) (let () (set self.result s) 1)) (set self.position pos) ()))))
(define-method $grammar <tpeg> () (let (e d fields parent rules name) (or (let ((pos self.position)) (unless (and (when (text-parser-invoke-rule (quote symbol) $symbol self) (set name self.result) 1) (text-parser-invoke-rule (quote space) $$space self) (text-parser-invoke-rule (quote plus) $$plus self) (when (let ((_list_ (array))) (while (text-parser-invoke-rule (quote definition) $definition self) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1) (set rules self.result) 1) (text-parser-invoke-rule (quote space) $$space self) (let () (set self.result (quasiquote (grammar-extend (unquote name) (unquote-splicing rules)))) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (when (text-parser-invoke-rule (quote symbol) $symbol self) (set name self.result) 1) (text-parser-invoke-rule (quote space) $$space self) (text-parser-invoke-rule (quote colon) $$colon self) (when (text-parser-invoke-rule (quote symbol) $symbol self) (set parent self.result) 1) (text-parser-invoke-rule (quote space) $$space self) (let () (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote lparen) $$lparen self) (when (let ((_list_ (array))) (while (text-parser-invoke-rule (quote identifier) $identifier self) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1) (set fields self.result) 1) (text-parser-invoke-rule (quote rparen) $$rparen self)) (set self.position pos) ())) 1) (when (let ((_list_ (array))) (while (text-parser-invoke-rule (quote definition) $definition self) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1) (set rules self.result) 1) (text-parser-invoke-rule (quote space) $$space self) (let () (set self.result (quasiquote (grammar-define (unquote name) (unquote parent) (unquote fields) (unquote-splicing rules)))) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (when (let ((_list_ (array))) (while (text-parser-invoke-rule (quote definition) $definition self) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1) (set d self.result) 1) (text-parser-invoke-rule (quote space) $$space self) (when (let ((_list_ (array))) (and (text-parser-invoke-rule (quote expression) $expression self) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1) (set e self.result) 1) (let () (set self.result (quasiquote (grammar-eval (unquote d) (unquote (car e))))) 1)) (set self.position pos) ())))))
(define-method $symfirst <tpeg> () (let () (text-parser-match-class self "!#$%&*+-/:<=>@ABCDEFGHIJKLMNOPQRSTUVWXYZ^_abcdefghijklmnopqrstuvwxyz|~")))
(define-method $symrest <tpeg> () (let () (text-parser-match-class self "!#$%&*+-./0123456789:<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ^_abcdefghijklmnopqrstuvwxyz|~")))
(define-method $symbol <tpeg> () (let () (let ((pos self.position)) (when (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote symfirst) $$symfirst self) (let () (while (text-parser-invoke-rule (quote symrest) $$symrest self)) 1)) (set self.position pos) ())) (set self.result (string->symbol (text-parser-string-from-to self pos self.position)))))))
(define-method $sexpr <tpeg> () (let (f e) (or (and (let ((pos self.position)) (when (let ((pos self.position)) (unless (and (let () (text-parser-match-object self 45) 1) (let ((_ok_ ())) (while (text-parser-invoke-rule (quote digit) $$digit self) (set _ok_ 1)) _ok_)) (set self.position pos) ())) (set self.result (text-parser-list-from-to self pos self.position)) 1)) (set self.result (string->number-base (list->string self.result) 10))) (text-parser-invoke-rule (quote symbol) $symbol self) (let ((pos self.position)) (unless (and (text-parser-match-object self 63) (text-parser-match-any self)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-match-object self 34) (when (and (let ((_list_ (array))) (while (let ((pos self.position)) (unless (and (not (let ((pos self.position)) (and (text-parser-match-object self 34) (set self.position pos)))) (text-parser-invoke-rule (quote char) $char self)) (set self.position pos) ())) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1) (set self.result (list->string self.result))) (set e self.result) 1) (text-parser-match-object self 34) (let () (set self.result e) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-match-object self 40) (when (let ((_list_ (array))) (while (text-parser-invoke-rule (quote sexpression) $sexpression self) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1) (set e self.result) 1) (let () (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote space) $$space self) (text-parser-invoke-rule (quote dot) $$dot self) (when (text-parser-invoke-rule (quote sexpression) $sexpression self) (set f self.result) 1)) (set self.position pos) ())) 1) (text-parser-invoke-rule (quote sspace) $$sspace self) (text-parser-match-object self 41) (let () (set self.result (set-list-source (quasiquote ((unquote-splicing e) (unquote-splicing f))) e)) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-match-object self 91) (when (let ((_list_ (array))) (while (text-parser-invoke-rule (quote sexpression) $sexpression self) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1) (set e self.result) 1) (let () (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote space) $$space self) (text-parser-invoke-rule (quote dot) $$dot self) (when (text-parser-invoke-rule (quote sexpression) $sexpression self) (set f self.result) 1)) (set self.position pos) ())) 1) (text-parser-invoke-rule (quote sspace) $$sspace self) (text-parser-match-object self 93) (let () (set self.result (set-list-source (quasiquote (bracket (unquote-splicing e) (unquote-splicing f))) e)) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-match-object self 39) (when (text-parser-invoke-rule (quote sexpression) $sexpression self) (set e self.result) 1) (let () (set self.result (list (quote quote) e)) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-match-object self 96) (when (text-parser-invoke-rule (quote sexpression) $sexpression self) (set e self.result) 1) (let () (set self.result (list (quote quasiquote) e)) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-match-string self ",@" 2) (when (text-parser-invoke-rule (quote sexpression) $sexpression self) (set e self.result) 1) (let () (set self.result (list (quote unquote-splicing) e)) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-match-object self 44) (when (text-parser-invoke-rule (quote sexpression) $sexpression self) (set e self.result) 1) (let () (set self.result (list (quote unquote) e)) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-match-object self 123) (text-parser-invoke-rule (quote space) $$space self) (when (text-parser-invoke-rule (quote grammar) $grammar self) (set e self.result) 1) (or (let ((pos self.position)) (unless (and (text-parser-match-object self 125) (let () (set self.result e) 1)) (set self.position pos) ())) (let () (set self.result (error "error in grammar near: " (parser-context self))) 1))) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-match-object self 59) (let ((_list_ (array))) (while (let ((pos self.position)) (unless (and (not (let ((pos self.position)) (and (text-parser-match-class self "\012\015") (set self.position pos)))) (text-parser-match-any self)) (set self.position pos) ())) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1)) (set self.position pos) ())))))
(define-method $scomment <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 59) (let ((_list_ (array))) (while (let ((pos self.position)) (unless (and (not (let ((pos self.position)) (and (text-parser-invoke-rule (quote eol) $$eol self) (set self.position pos)))) (text-parser-match-any self)) (set self.position pos) ())) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1)) (set self.position pos) ()))))
(define-method $sspace <tpeg> () (let () (let ((_list_ (array))) (while (or (text-parser-invoke-rule (quote blank) $blank self) (text-parser-invoke-rule (quote eol) $eol self) (text-parser-invoke-rule (quote scomment) $scomment self)) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1)))
(define-method $sexpression <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote sspace) $$sspace self) (text-parser-invoke-rule (quote sexpr) $sexpr self)) (set self.position pos) ()))))
(define-method $llist <tpeg> () (let (e) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote lparen) $$lparen self) (when (text-parser-invoke-rule (quote expression) $expression self) (set e self.result) 1) (text-parser-invoke-rule (quote rparen) $$rparen self) (let () (set self.result e) 1)) (set self.position pos) ()))))
(define-method $atom <tpeg> () (let (p e) (or (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote lparen) $$lparen self) (when (text-parser-invoke-rule (quote expression) $expression self) (set e self.result) 1) (text-parser-invoke-rule (quote rparen) $$rparen self) (let () (set self.result e) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote quotesgl) $$quotesgl self) (when (text-parser-invoke-rule (quote sexpression) $sexpression self) (set e self.result) 1) (text-parser-invoke-rule (quote space) $$space self) (let () (set self.result (quasiquote (match-object (unquote e)))) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (when (text-parser-invoke-rule (quote string) $string self) (set e self.result) 1) (let () (set self.result (quasiquote (match-string (unquote e)))) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (when (text-parser-invoke-rule (quote class) $class self) (set e self.result) 1) (let () (set self.result (quasiquote (match-class (unquote e)))) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (when (text-parser-invoke-rule (quote idpart) $idpart self) (set p self.result) 1) (text-parser-match-object self 45) (when (text-parser-invoke-rule (quote identifier) $identifier self) (set e self.result) 1) (let () (set self.result (quasiquote (match-rule-in (unquote p) (unquote e)))) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (when (text-parser-invoke-rule (quote identifier) $identifier self) (set e self.result) 1) (let () (set self.result (quasiquote (match-rule (unquote e)))) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote lbrace) $$lbrace self) (when (let ((_list_ (array))) (while (text-parser-invoke-rule (quote sexpression) $sexpression self) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1) (set e self.result) 1) (text-parser-invoke-rule (quote space) $$space self) (text-parser-invoke-rule (quote rbrace) $$rbrace self) (let () (set self.result (quasiquote (match-rule (unquote-splicing e)))) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote dot) $$dot self) (let () (set self.result (quasiquote (match-any))) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote arrow) $$arrow self) (when (text-parser-invoke-rule (quote sexpression) $sexpression self) (set e self.result) 1) (text-parser-invoke-rule (quote space) $$space self) (let () (set self.result (quasiquote (result-expr (unquote e)))) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote backquote) $$backquote self) (when (text-parser-invoke-rule (quote llist) $llist self) (set e self.result) 1) (let () (set self.result (quasiquote (match-list (unquote e)))) 1)) (set self.position pos) ())))))
(define-method $repetition <tpeg> () (let (e) (let ((pos self.position)) (unless (and (when (text-parser-invoke-rule (quote atom) $atom self) (set e self.result) 1) (let () (or (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote query) $$query self) (when (let () (set self.result (quasiquote (match-zero-one (unquote e)))) 1) (set e self.result) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote star) $$star self) (when (let () (set self.result (quasiquote (match-zero-more (unquote e)))) 1) (set e self.result) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote plus) $$plus self) (when (let () (set self.result (quasiquote (match-one-more (unquote e)))) 1) (set e self.result) 1)) (set self.position pos) ()))) 1) (let () (set self.result e) 1)) (set self.position pos) ()))))
(define-method $conversion <tpeg> () (let (i n e) (let ((pos self.position)) (unless (and (when (text-parser-invoke-rule (quote repetition) $repetition self) (set e self.result) 1) (let () (while (or (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote at) $$at self) (when (let () (set self.result (quasiquote (make-span (unquote e)))) 1) (set e self.result) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote dollarhash) $$dollarhash self) (or (let ((pos self.position)) (unless (and (when (text-parser-invoke-rule (quote number) $number self) (set n self.result) 1) (when (let () (set self.result (quasiquote (make-number (unquote n) (unquote e)))) 1) (set e self.result) 1)) (set self.position pos) ())) (when (let () (set self.result (quasiquote (make-number 10 (unquote e)))) 1) (set e self.result) 1))) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote dollardbl) $$dollardbl self) (when (let () (set self.result (quasiquote (make-symbol (unquote e)))) 1) (set e self.result) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote dollar) $$dollar self) (when (let () (set self.result (quasiquote (make-string (unquote e)))) 1) (set e self.result) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote colon) $$colon self) (when (text-parser-invoke-rule (quote identifier) $identifier self) (set i self.result) 1) (when (let () (set self.result (quasiquote (assign-result (unquote i) (unquote e)))) 1) (set e self.result) 1)) (set self.position pos) ())))) 1) (let () (set self.result e) 1)) (set self.position pos) ()))))
(define-method $predicate <tpeg> () (let (e) (or (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote pling) $$pling self) (when (text-parser-invoke-rule (quote conversion) $conversion self) (set e self.result) 1) (let () (set self.result (quasiquote (peek-not (unquote e)))) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote ampersand) $$ampersand self) (or (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote arrow) $$arrow self) (when (text-parser-invoke-rule (quote sexpression) $sexpression self) (set e self.result) 1) (text-parser-invoke-rule (quote space) $$space self) (let () (set self.result (quasiquote (peek-expr (unquote e)))) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (when (text-parser-invoke-rule (quote conversion) $conversion self) (set e self.result) 1) (let () (set self.result (quasiquote (peek-for (unquote e)))) 1)) (set self.position pos) ())))) (set self.position pos) ())) (text-parser-invoke-rule (quote conversion) $conversion self))))
(define-method $require <tpeg> () (let (e p) (let ((pos self.position)) (unless (and (when (text-parser-invoke-rule (quote predicate) $predicate self) (set p self.result) 1) (or (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote tilde) $$tilde self) (when (text-parser-invoke-rule (quote string) $string self) (set e self.result) 1) (let () (set self.result (quasiquote (match-require (unquote p) (unquote e)))) 1)) (set self.position pos) ())) (let () (set self.result p) 1))) (set self.position pos) ()))))
(define-method $sequence <tpeg> () (let (q p) (let ((pos self.position)) (unless (and (when (text-parser-invoke-rule (quote require) $require self) (set p self.result) 1) (or (let ((pos self.position)) (unless (and (when (let ((_list_ (array))) (while (text-parser-invoke-rule (quote require) $require self) (array-append _list_ self.result)) (set self.result (array->list _list_))) (set q self.result) 1) (let () (set self.result (quasiquote (match-all (unquote p) (unquote-splicing q)))) 1)) (set self.position pos) ())) (let () (set self.result p) 1))) (set self.position pos) ()))))
(define-method $expression <tpeg> () (let (t s) (let ((pos self.position)) (unless (and (when (text-parser-invoke-rule (quote sequence) $sequence self) (set s self.result) 1) (or (let ((pos self.position)) (unless (and (when (let ((_list_ (array))) (while (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote bar) $$bar self) (text-parser-invoke-rule (quote sequence) $sequence self)) (set self.position pos) ())) (array-append _list_ self.result)) (set self.result (array->list _list_))) (set t self.result) 1) (let () (set self.result (quasiquote (match-first (unquote s) (unquote-splicing t)))) 1)) (set self.position pos) ())) (let () (set self.result s) 1))) (set self.position pos) ()))))
(define-method $parameters <tpeg> () (let () (let ((_list_ (array))) (while (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote colon) $$colon self) (text-parser-invoke-rule (quote identifier) $identifier self)) (set self.position pos) ())) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1)))
(define-method $definition <tpeg> () (let (e p id) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote space) $$space self) (when (text-parser-invoke-rule (quote identifier) $identifier self) (set id self.result) 1) (when (text-parser-invoke-rule (quote parameters) $parameters self) (set p self.result) 1) (text-parser-invoke-rule (quote equals) $$equals self) (when (text-parser-invoke-rule (quote expression) $expression self) (set e self.result) 1) (text-parser-match-object self 59) (let () (set self.result (quasiquote ((unquote id) (unquote e) (unquote p)))) 1)) (set self.position pos) ()))))
(define-method $definitions <tpeg> () (let () (let ((_list_ (array))) (while (text-parser-invoke-rule (quote definition) $definition self) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1)))
(define-method $varname <tpeg> () (let (s) (let ((pos self.position)) (unless (and (when (text-parser-invoke-rule (quote symbol) $symbol self) (set s self.result) 1) (text-parser-invoke-rule (quote space) $$space self) (let () (set self.result s) 1)) (set self.position pos) ()))))
(define-method $parser_decl <tpeg> () (let (vars parent name) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote space) $$space self) (when (text-parser-invoke-rule (quote varname) $varname self) (set name self.result) 1) (text-parser-invoke-rule (quote colon) $$colon self) (when (text-parser-invoke-rule (quote varname) $varname self) (set parent self.result) 1) (text-parser-invoke-rule (quote lparen) $$lparen self) (when (let ((_list_ (array))) (while (text-parser-invoke-rule (quote varname) $varname self) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1) (set vars self.result) 1) (text-parser-invoke-rule (quote rparen) $$rparen self) (let () (set self.result (quasiquote ((unquote name) (unquote parent) (unquote vars)))) 1)) (set self.position pos) ()))))
(define-method $parser_spec <tpeg> () (let (defns decl) (let ((pos self.position)) (unless (and (when (let ((_list_ (array))) (and (text-parser-invoke-rule (quote parser_decl) $parser_decl self) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1) (set decl self.result) 1) (when (let ((_list_ (array))) (while (text-parser-invoke-rule (quote definition) $definition self) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1) (set defns self.result) 1) (let () (set self.result (quasiquote ((unquote decl) (unquote-splicing defns)))) 1)) (set self.position pos) ()))))
(define-method $$equals <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 61) (text-parser-invoke-rule (quote space) $$space self)) (set self.position pos) ()))))
(define-method $$blank <tpeg> () (let () (text-parser-match-class self "\011 ")))
(define-method $$eol <tpeg> () (let () (or (let ((pos self.position)) (unless (and (text-parser-match-object self 10) (let () (while (text-parser-match-object self 13)) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-match-object self 13) (let () (while (text-parser-match-object self 10)) 1)) (set self.position pos) ())))))
(define-method $$comment <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 35) (let () (while (let ((pos self.position)) (unless (and (not (let ((pos self.position)) (and (text-parser-invoke-rule (quote eol) $$eol self) (set self.position pos)))) (text-parser-match-any self)) (set self.position pos) ()))) 1)) (set self.position pos) ()))))
(define-method $$space <tpeg> () (let () (let () (while (or (text-parser-invoke-rule (quote blank) $$blank self) (text-parser-invoke-rule (quote eol) $$eol self) (text-parser-invoke-rule (quote comment) $$comment self))) 1)))
(define-method $$bar <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 124) (text-parser-invoke-rule (quote space) $$space self)) (set self.position pos) ()))))
(define-method $$pling <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 33) (text-parser-invoke-rule (quote space) $$space self)) (set self.position pos) ()))))
(define-method $$ampersand <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 38) (text-parser-invoke-rule (quote space) $$space self)) (set self.position pos) ()))))
(define-method $$colon <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 58) (text-parser-invoke-rule (quote space) $$space self)) (set self.position pos) ()))))
(define-method $$arrow <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-string self "->" 2) (text-parser-invoke-rule (quote space) $$space self)) (set self.position pos) ()))))
(define-method $$quotesgl <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 39) (text-parser-invoke-rule (quote space) $$space self)) (set self.position pos) ()))))
(define-method $$backquote <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 96) (text-parser-invoke-rule (quote space) $$space self)) (set self.position pos) ()))))
(define-method $$commaat <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-string self ",@" 2) (text-parser-invoke-rule (quote space) $$space self)) (set self.position pos) ()))))
(define-method $$comma <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 44) (text-parser-invoke-rule (quote space) $$space self)) (set self.position pos) ()))))
(define-method $$dollarhash <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-string self "$#" 2) (text-parser-invoke-rule (quote space) $$space self)) (set self.position pos) ()))))
(define-method $$dollardbl <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-string self "$$" 2) (text-parser-invoke-rule (quote space) $$space self)) (set self.position pos) ()))))
(define-method $$dollar <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 36) (text-parser-invoke-rule (quote space) $$space self)) (set self.position pos) ()))))
(define-method $$at <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 64) (text-parser-invoke-rule (quote space) $$space self)) (set self.position pos) ()))))
(define-method $$query <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 63) (text-parser-invoke-rule (quote space) $$space self)) (set self.position pos) ()))))
(define-method $$minus <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 45) (text-parser-invoke-rule (quote space) $$space self)) (set self.position pos) ()))))
(define-method $$plus <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 43) (text-parser-invoke-rule (quote space) $$space self)) (set self.position pos) ()))))
(define-method $$star <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 42) (text-parser-invoke-rule (quote space) $$space self)) (set self.position pos) ()))))
(define-method $$lparen <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 40) (text-parser-invoke-rule (quote space) $$space self)) (set self.position pos) ()))))
(define-method $$rparen <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 41) (text-parser-invoke-rule (quote space) $$space self)) (set self.position pos) ()))))
(define-method $$lbrace <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 123) (text-parser-invoke-rule (quote space) $$space self)) (set self.position pos) ()))))
(define-method $$rbrace <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 125) (text-parser-invoke-rule (quote space) $$space self)) (set self.position pos) ()))))
(define-method $$dot <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 46) (text-parser-invoke-rule (quote space) $$space self)) (set self.position pos) ()))))
(define-method $$tilde <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 126) (text-parser-invoke-rule (quote space) $$space self)) (set self.position pos) ()))))
(define-method $$digit <tpeg> () (let () (text-parser-match-class self "0123456789")))
(define-method $$higit <tpeg> () (let () (text-parser-match-class self "0123456789ABCDEFabcdef")))
(define-method $$number <tpeg> () (let (n) (let ((pos self.position)) (unless (and (when (and (let ((pos self.position)) (when (let ((pos self.position)) (unless (and (let () (text-parser-match-object self 45) 1) (let ((_ok_ ())) (while (text-parser-invoke-rule (quote digit) $$digit self) (set _ok_ 1)) _ok_)) (set self.position pos) ())) (set self.result (text-parser-list-from-to self pos self.position)) 1)) (set self.result (string->number-base (list->string self.result) 10))) (set n self.result) 1) (text-parser-invoke-rule (quote space) $$space self) (let () n 1)) (set self.position pos) ()))))
(define-method $$letter <tpeg> () (let () (text-parser-match-class self "ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz")))
(define-method $$idpart <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote letter) $$letter self) (let () (while (or (text-parser-invoke-rule (quote letter) $$letter self) (text-parser-invoke-rule (quote digit) $$digit self))) 1)) (set self.position pos) ()))))
(define-method $$identifier <tpeg> () (let (id) (let ((pos self.position)) (unless (and (when (text-parser-invoke-rule (quote idpart) $idpart self) (set id self.result) 1) (text-parser-invoke-rule (quote space) $$space self) (let () id 1)) (set self.position pos) ()))))
(define-method $$char <tpeg> () (let () (or (let ((pos self.position)) (unless (and (text-parser-match-object self 92) (or (let ((pos self.position)) (unless (and (text-parser-match-object self 116) (let () 9 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-match-object self 110) (let () 10 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-match-object self 114) (let () 13 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-match-object self 120) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote higit) $$higit self) (text-parser-invoke-rule (quote higit) $$higit self)) (set self.position pos) ()))) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-match-object self 117) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote higit) $$higit self) (text-parser-invoke-rule (quote higit) $$higit self) (text-parser-invoke-rule (quote higit) $$higit self) (text-parser-invoke-rule (quote higit) $$higit self)) (set self.position pos) ()))) (set self.position pos) ())) (text-parser-match-any self))) (set self.position pos) ())) (text-parser-match-any self))))
(define-method $$string <tpeg> () (let (s) (let ((pos self.position)) (unless (and (text-parser-match-object self 34) (when (and (let ((_list_ (array))) (while (let ((pos self.position)) (unless (and (not (let ((pos self.position)) (and (text-parser-match-object self 34) (set self.position pos)))) (text-parser-invoke-rule (quote char) $char self)) (set self.position pos) ())) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1) (set self.result (list->string self.result))) (set s self.result) 1) (text-parser-match-object self 34) (text-parser-invoke-rule (quote space) $$space self) (let () s 1)) (set self.position pos) ()))))
(define-method $$class <tpeg> () (let (s) (let ((pos self.position)) (unless (and (text-parser-match-object self 91) (when (and (let ((_list_ (array))) (while (let ((pos self.position)) (unless (and (not (let ((pos self.position)) (and (text-parser-match-object self 93) (set self.position pos)))) (text-parser-invoke-rule (quote char) $char self)) (set self.position pos) ())) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1) (set self.result (list->string self.result))) (set s self.result) 1) (text-parser-match-object self 93) (text-parser-invoke-rule (quote space) $$space self) (let () s 1)) (set self.position pos) ()))))
(define-method $$grammar <tpeg> () (let (e d fields parent rules name) (or (let ((pos self.position)) (unless (and (when (text-parser-invoke-rule (quote symbol) $symbol self) (set name self.result) 1) (text-parser-invoke-rule (quote space) $$space self) (text-parser-invoke-rule (quote plus) $$plus self) (when (let ((_list_ (array))) (while (text-parser-invoke-rule (quote definition) $definition self) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1) (set rules self.result) 1) (text-parser-invoke-rule (quote space) $$space self) (let () (quasiquote (grammar-extend (unquote name) (unquote-splicing rules))) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (when (text-parser-invoke-rule (quote symbol) $symbol self) (set name self.result) 1) (text-parser-invoke-rule (quote space) $$space self) (text-parser-invoke-rule (quote colon) $$colon self) (when (text-parser-invoke-rule (quote symbol) $symbol self) (set parent self.result) 1) (text-parser-invoke-rule (quote space) $$space self) (let () (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote lparen) $$lparen self) (when (let ((_list_ (array))) (while (text-parser-invoke-rule (quote identifier) $identifier self) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1) (set fields self.result) 1) (text-parser-invoke-rule (quote rparen) $$rparen self)) (set self.position pos) ())) 1) (when (let ((_list_ (array))) (while (text-parser-invoke-rule (quote definition) $definition self) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1) (set rules self.result) 1) (text-parser-invoke-rule (quote space) $$space self) (let () (quasiquote (grammar-define (unquote name) (unquote parent) (unquote fields) (unquote-splicing rules))) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (when (let ((_list_ (array))) (while (text-parser-invoke-rule (quote definition) $definition self) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1) (set d self.result) 1) (text-parser-invoke-rule (quote space) $$space self) (when (let ((_list_ (array))) (and (text-parser-invoke-rule (quote expression) $expression self) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1) (set e self.result) 1) (let () (quasiquote (grammar-eval (unquote d) (unquote (car e)))) 1)) (set self.position pos) ())))))
(define-method $$symfirst <tpeg> () (let () (text-parser-match-class self "!#$%&*+-/:<=>@ABCDEFGHIJKLMNOPQRSTUVWXYZ^_abcdefghijklmnopqrstuvwxyz|~")))
(define-method $$symrest <tpeg> () (let () (text-parser-match-class self "!#$%&*+-./0123456789:<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ^_abcdefghijklmnopqrstuvwxyz|~")))
(define-method $$symbol <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote symfirst) $$symfirst self) (let () (while (text-parser-invoke-rule (quote symrest) $$symrest self)) 1)) (set self.position pos) ()))))
(define-method $$sexpr <tpeg> () (let (f e) (or (let ((pos self.position)) (unless (and (let () (text-parser-match-object self 45) 1) (let ((_ok_ ())) (while (text-parser-invoke-rule (quote digit) $$digit self) (set _ok_ 1)) _ok_)) (set self.position pos) ())) (text-parser-invoke-rule (quote symbol) $$symbol self) (let ((pos self.position)) (unless (and (text-parser-match-object self 63) (text-parser-match-any self)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-match-object self 34) (when (and (let ((_list_ (array))) (while (let ((pos self.position)) (unless (and (not (let ((pos self.position)) (and (text-parser-match-object self 34) (set self.position pos)))) (text-parser-invoke-rule (quote char) $char self)) (set self.position pos) ())) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1) (set self.result (list->string self.result))) (set e self.result) 1) (text-parser-match-object self 34) (let () e 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-match-object self 40) (when (let ((_list_ (array))) (while (text-parser-invoke-rule (quote sexpression) $sexpression self) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1) (set e self.result) 1) (let () (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote space) $$space self) (text-parser-invoke-rule (quote dot) $$dot self) (when (text-parser-invoke-rule (quote sexpression) $sexpression self) (set f self.result) 1)) (set self.position pos) ())) 1) (text-parser-invoke-rule (quote sspace) $$sspace self) (text-parser-match-object self 41) (let () (set-list-source (quasiquote ((unquote-splicing e) (unquote-splicing f))) e) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-match-object self 91) (when (let ((_list_ (array))) (while (text-parser-invoke-rule (quote sexpression) $sexpression self) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1) (set e self.result) 1) (let () (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote space) $$space self) (text-parser-invoke-rule (quote dot) $$dot self) (when (text-parser-invoke-rule (quote sexpression) $sexpression self) (set f self.result) 1)) (set self.position pos) ())) 1) (text-parser-invoke-rule (quote sspace) $$sspace self) (text-parser-match-object self 93) (let () (set-list-source (quasiquote (bracket (unquote-splicing e) (unquote-splicing f))) e) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-match-object self 39) (when (text-parser-invoke-rule (quote sexpression) $sexpression self) (set e self.result) 1) (let () (list (quote quote) e) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-match-object self 96) (when (text-parser-invoke-rule (quote sexpression) $sexpression self) (set e self.result) 1) (let () (list (quote quasiquote) e) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-match-string self ",@" 2) (when (text-parser-invoke-rule (quote sexpression) $sexpression self) (set e self.result) 1) (let () (list (quote unquote-splicing) e) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-match-object self 44) (when (text-parser-invoke-rule (quote sexpression) $sexpression self) (set e self.result) 1) (let () (list (quote unquote) e) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-match-object self 123) (text-parser-invoke-rule (quote space) $$space self) (when (text-parser-invoke-rule (quote grammar) $grammar self) (set e self.result) 1) (or (let ((pos self.position)) (unless (and (text-parser-match-object self 125) (let () e 1)) (set self.position pos) ())) (let () (error "error in grammar near: " (parser-context self)) 1))) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-match-object self 59) (let () (while (let ((pos self.position)) (unless (and (not (let ((pos self.position)) (and (text-parser-match-class self "\012\015") (set self.position pos)))) (text-parser-match-any self)) (set self.position pos) ()))) 1)) (set self.position pos) ())))))
(define-method $$scomment <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-match-object self 59) (let () (while (let ((pos self.position)) (unless (and (not (let ((pos self.position)) (and (text-parser-invoke-rule (quote eol) $$eol self) (set self.position pos)))) (text-parser-match-any self)) (set self.position pos) ()))) 1)) (set self.position pos) ()))))
(define-method $$sspace <tpeg> () (let () (let () (while (or (text-parser-invoke-rule (quote blank) $$blank self) (text-parser-invoke-rule (quote eol) $$eol self) (text-parser-invoke-rule (quote scomment) $$scomment self))) 1)))
(define-method $$sexpression <tpeg> () (let () (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote sspace) $$sspace self) (text-parser-invoke-rule (quote sexpr) $$sexpr self)) (set self.position pos) ()))))
(define-method $$llist <tpeg> () (let (e) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote lparen) $$lparen self) (when (text-parser-invoke-rule (quote expression) $expression self) (set e self.result) 1) (text-parser-invoke-rule (quote rparen) $$rparen self) (let () e 1)) (set self.position pos) ()))))
(define-method $$atom <tpeg> () (let (p e) (or (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote lparen) $$lparen self) (when (text-parser-invoke-rule (quote expression) $expression self) (set e self.result) 1) (text-parser-invoke-rule (quote rparen) $$rparen self) (let () e 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote quotesgl) $$quotesgl self) (when (text-parser-invoke-rule (quote sexpression) $sexpression self) (set e self.result) 1) (text-parser-invoke-rule (quote space) $$space self) (let () (quasiquote (match-object (unquote e))) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (when (text-parser-invoke-rule (quote string) $string self) (set e self.result) 1) (let () (quasiquote (match-string (unquote e))) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (when (text-parser-invoke-rule (quote class) $class self) (set e self.result) 1) (let () (quasiquote (match-class (unquote e))) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (when (text-parser-invoke-rule (quote idpart) $idpart self) (set p self.result) 1) (text-parser-match-object self 45) (when (text-parser-invoke-rule (quote identifier) $identifier self) (set e self.result) 1) (let () (quasiquote (match-rule-in (unquote p) (unquote e))) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (when (text-parser-invoke-rule (quote identifier) $identifier self) (set e self.result) 1) (let () (quasiquote (match-rule (unquote e))) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote lbrace) $$lbrace self) (when (let ((_list_ (array))) (while (text-parser-invoke-rule (quote sexpression) $sexpression self) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1) (set e self.result) 1) (text-parser-invoke-rule (quote space) $$space self) (text-parser-invoke-rule (quote rbrace) $$rbrace self) (let () (quasiquote (match-rule (unquote-splicing e))) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote dot) $$dot self) (let () (quasiquote (match-any)) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote arrow) $$arrow self) (when (text-parser-invoke-rule (quote sexpression) $sexpression self) (set e self.result) 1) (text-parser-invoke-rule (quote space) $$space self) (let () (quasiquote (result-expr (unquote e))) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote backquote) $$backquote self) (when (text-parser-invoke-rule (quote llist) $llist self) (set e self.result) 1) (let () (quasiquote (match-list (unquote e))) 1)) (set self.position pos) ())))))
(define-method $$repetition <tpeg> () (let (e) (let ((pos self.position)) (unless (and (when (text-parser-invoke-rule (quote atom) $atom self) (set e self.result) 1) (let () (or (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote query) $$query self) (when (let () (set self.result (quasiquote (match-zero-one (unquote e)))) 1) (set e self.result) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote star) $$star self) (when (let () (set self.result (quasiquote (match-zero-more (unquote e)))) 1) (set e self.result) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote plus) $$plus self) (when (let () (set self.result (quasiquote (match-one-more (unquote e)))) 1) (set e self.result) 1)) (set self.position pos) ()))) 1) (let () e 1)) (set self.position pos) ()))))
(define-method $$conversion <tpeg> () (let (i n e) (let ((pos self.position)) (unless (and (when (text-parser-invoke-rule (quote repetition) $repetition self) (set e self.result) 1) (let () (while (or (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote at) $$at self) (when (let () (set self.result (quasiquote (make-span (unquote e)))) 1) (set e self.result) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote dollarhash) $$dollarhash self) (or (let ((pos self.position)) (unless (and (when (text-parser-invoke-rule (quote number) $number self) (set n self.result) 1) (when (let () (set self.result (quasiquote (make-number (unquote n) (unquote e)))) 1) (set e self.result) 1)) (set self.position pos) ())) (when (let () (set self.result (quasiquote (make-number 10 (unquote e)))) 1) (set e self.result) 1))) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote dollardbl) $$dollardbl self) (when (let () (set self.result (quasiquote (make-symbol (unquote e)))) 1) (set e self.result) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote dollar) $$dollar self) (when (let () (set self.result (quasiquote (make-string (unquote e)))) 1) (set e self.result) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote colon) $$colon self) (when (text-parser-invoke-rule (quote identifier) $identifier self) (set i self.result) 1) (when (let () (set self.result (quasiquote (assign-result (unquote i) (unquote e)))) 1) (set e self.result) 1)) (set self.position pos) ())))) 1) (let () e 1)) (set self.position pos) ()))))
(define-method $$predicate <tpeg> () (let (e) (or (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote pling) $$pling self) (when (text-parser-invoke-rule (quote conversion) $conversion self) (set e self.result) 1) (let () (quasiquote (peek-not (unquote e))) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote ampersand) $$ampersand self) (or (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote arrow) $$arrow self) (when (text-parser-invoke-rule (quote sexpression) $sexpression self) (set e self.result) 1) (text-parser-invoke-rule (quote space) $$space self) (let () (quasiquote (peek-expr (unquote e))) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (when (text-parser-invoke-rule (quote conversion) $conversion self) (set e self.result) 1) (let () (quasiquote (peek-for (unquote e))) 1)) (set self.position pos) ())))) (set self.position pos) ())) (text-parser-invoke-rule (quote conversion) $$conversion self))))
(define-method $$require <tpeg> () (let (e p) (let ((pos self.position)) (unless (and (when (text-parser-invoke-rule (quote predicate) $predicate self) (set p self.result) 1) (or (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote tilde) $$tilde self) (when (text-parser-invoke-rule (quote string) $string self) (set e self.result) 1) (let () (quasiquote (match-require (unquote p) (unquote e))) 1)) (set self.position pos) ())) (let () p 1))) (set self.position pos) ()))))
(define-method $$sequence <tpeg> () (let (q p) (let ((pos self.position)) (unless (and (when (text-parser-invoke-rule (quote require) $require self) (set p self.result) 1) (or (let ((pos self.position)) (unless (and (when (let ((_list_ (array))) (while (text-parser-invoke-rule (quote require) $require self) (array-append _list_ self.result)) (set self.result (array->list _list_))) (set q self.result) 1) (let () (quasiquote (match-all (unquote p) (unquote-splicing q))) 1)) (set self.position pos) ())) (let () p 1))) (set self.position pos) ()))))
(define-method $$expression <tpeg> () (let (t s) (let ((pos self.position)) (unless (and (when (text-parser-invoke-rule (quote sequence) $sequence self) (set s self.result) 1) (or (let ((pos self.position)) (unless (and (when (let ((_list_ (array))) (while (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote bar) $$bar self) (text-parser-invoke-rule (quote sequence) $sequence self)) (set self.position pos) ())) (array-append _list_ self.result)) (set self.result (array->list _list_))) (set t self.result) 1) (let () (quasiquote (match-first (unquote s) (unquote-splicing t))) 1)) (set self.position pos) ())) (let () s 1))) (set self.position pos) ()))))
(define-method $$parameters <tpeg> () (let () (let () (while (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote colon) $$colon self) (text-parser-invoke-rule (quote identifier) $$identifier self)) (set self.position pos) ()))) 1)))
(define-method $$definition <tpeg> () (let (e p id) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote space) $$space self) (when (text-parser-invoke-rule (quote identifier) $identifier self) (set id self.result) 1) (when (text-parser-invoke-rule (quote parameters) $parameters self) (set p self.result) 1) (text-parser-invoke-rule (quote equals) $$equals self) (when (text-parser-invoke-rule (quote expression) $expression self) (set e self.result) 1) (text-parser-match-object self 59) (let () (quasiquote ((unquote id) (unquote e) (unquote p))) 1)) (set self.position pos) ()))))
(define-method $$definitions <tpeg> () (let () (let () (while (text-parser-invoke-rule (quote definition) $$definition self)) 1)))
(define-method $$varname <tpeg> () (let (s) (let ((pos self.position)) (unless (and (when (text-parser-invoke-rule (quote symbol) $symbol self) (set s self.result) 1) (text-parser-invoke-rule (quote space) $$space self) (let () s 1)) (set self.position pos) ()))))
(define-method $$parser_decl <tpeg> () (let (vars parent name) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote space) $$space self) (when (text-parser-invoke-rule (quote varname) $varname self) (set name self.result) 1) (text-parser-invoke-rule (quote colon) $$colon self) (when (text-parser-invoke-rule (quote varname) $varname self) (set parent self.result) 1) (text-parser-invoke-rule (quote lparen) $$lparen self) (when (let ((_list_ (array))) (while (text-parser-invoke-rule (quote varname) $varname self) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1) (set vars self.result) 1) (text-parser-invoke-rule (quote rparen) $$rparen self) (let () (quasiquote ((unquote name) (unquote parent) (unquote vars))) 1)) (set self.position pos) ()))))
(define-method $$parser_spec <tpeg> () (let (defns decl) (let ((pos self.position)) (unless (and (when (let ((_list_ (array))) (and (text-parser-invoke-rule (quote parser_decl) $parser_decl self) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1) (set decl self.result) 1) (when (let ((_list_ (array))) (while (text-parser-invoke-rule (quote definition) $definition self) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1) (set defns self.result) 1) (let () (quasiquote ((unquote decl) (unquote-splicing defns))) 1)) (set self.position pos) ()))))
